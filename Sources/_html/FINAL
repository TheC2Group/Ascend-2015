**** Shared/Layouts/_Root.cshtml

<script src="~/Static/js/lib/jquery.min.js"></script>
<script src="~/Static/js/lib/angular.min.js"></script>
<script src="~/Static/js/lib/angular-sanitize.js"></script>
<script type="text/javascript" src="~/Static/js/lib/ng-infinite-scroll.min.js"></script>
<script type="text/javascript" src="~/Static/js/app.js"></script>


**** StartPage/Index.cshtml

@model SPA.Web.Models.Pages.StartPage

<div class="App" ng-app="newsfeed" ng-controller="NewsFeedController">
    <div class="List" data-ui="list">
        <ul>
            <li data-article="{{$index}}" ng-repeat="article in toc" data-status="{{isSelected($index)}}" ng-click="selectArticle($index)">
                <div class="image"><img data-ui="image" ng-src="{{article.thumbnail.path}}" /></div>
                <div class="teaser">
                    <h3>{{article.headline}}</h3>
                    <p class="datatime">{{article.dateTime | date:'MM/dd/yyyy @@ h:mma'}}</p>
                </div>
                <div class="progress" style="height:{{getReadPercent()}}%"><span class="bar"></span></div>
            </li>
        </ul>
    </div>
    <div scroll class="Reader" data-ui="reader">
        <div class="Articles" infinite-scroll="loadMore()">
            <article data-article="{{$index}}" ng-repeat="article in pagedArticles" class="Article">
                <h1>{{article.headline}}</h1>
                <p class="author">{{article.author}}
                <p class="datatime">{{article.dateTime | date:'MM/dd/yyyy @@ h:mma'}}</p>
                <div class="image"><img ng-src="{{article.image.path}}" alt=""></div>
                <div ng-bind-html="article.mainBody"></div>
            </article>
        </div>
    </div>
</div>

**** app.js

(function () {
    var app = angular.module('newsfeed', ['ngSanitize', 'infinite-scroll']);

    app.directive('scroll', function () {
        return {
            restrict: 'A',
            link: function ($scope, elem, attr, ctrl) {
                $(window).bind('scroll', function () {
                    var el = $("article[data-article='" + $scope.selectedArticle + "']");
                    if ($(el).position() === undefined) return;

                    var scrollTop = $(window).scrollTop();
                    var articleTop = $(el).position().top;
                    var articleHeight = $(el).outerHeight();

                    $scope.readPercent = ((scrollTop - articleTop) / articleHeight) * 100;
                    
                    if (!$scope.clickScrolling) {
                        if ($scope.readPercent > 100) {
                            $scope.selectedArticle = $scope.selectedArticle + 1;
                        } else if ($scope.readPercent < 0) {
                            $scope.selectedArticle = $scope.selectedArticle - 1;
                        }
                    }

                    $scope.$apply();
                });
            }
        };
    });

	app.controller('NewsFeedController', [
        '$scope', '$http', '$log', '$q', '$timeout', function ($scope, $http, $log, $q, $timeout) {

		    var init = function() {
		        $scope.toc = [];
		        $scope.pagedArticles = [];

		        $scope.skip = 0;
		        $scope.take = 1;
		        $scope.busy = false;
		        $scope.selectedArticle = 0;
		        $scope.readPercent = 0;
		        $scope.clickScrolling = false;

		        $scope.loadToc();
		    };

		    $scope.getReadPercent = function()
		    {
		        return $scope.readPercent;
		    }

		    $scope.selectToc = function (index) {
		        $scope.selectedArticle = index;
		    };

		    $scope.isSelected = function (index) {
		        if ($scope.selectedArticle == index) return 'on';
		        else return 'off';
		    };

		    $scope.selectArticle = function (index) {
		        $scope.selectedArticle = index;

		        if (index >= $scope.skip) {
		            $scope.take = index - $scope.skip + 1;
		            $scope.loadMore().then(function () {
		                $timeout(function () {
		                    var el = $("article[data-article='" + index + "']");
		                    $scope.clickScrolling = true;
		                    $("body").animate({ scrollTop: el.offset().top + 1 }, "slow").promise().done(function () { $scope.clickScrolling = false });;
		                });
                    });
		        } else {
		                var el = $("article[data-article='" + index + "']");
		                $scope.clickScrolling = true;
		                $("body").animate({ scrollTop: el.offset().top + 1 }, "slow").promise().done(function () { $scope.clickScrolling = false });
		        }
		    }

		    $scope.loadToc = function () {
		        $http.get('/newsapi/article/toc').success(function (data) {
		            $scope.toc = data;
		        }).error(function (data) {
		            $log.error("TOC/Index not found");
		        });
		    };

		    $scope.loadMore = function () {
		        return $q(function (resolve, reject) {
		            if ($scope.busy) return;
		            $scope.busy = true;

		            $http.get('/newsapi/articles?take=' + $scope.take + '&skip=' + $scope.skip).success(function (data) {
		                for (var i = 0; i < data.length; i++) {
		                    $scope.pagedArticles.push(data[i]);
		                    $scope.skip++;
		                    
		                }
		                $scope.take = 1;
		                $scope.busy = false;
		                resolve();
		            }).error(function (data) {
		                $log.error("Unable to load article");
		                reject();
		            });
		        });
		    };

		    init();
		
	}]);
})();


**** Global.asaxcs

GlobalConfiguration.Configure(WebApiConfig.Register);

**** WebApiConfig

using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using System.Web.Http;

namespace SPA.Web.Business.Initialization
{
    public static class WebApiConfig
    {
        public static void Register(HttpConfiguration config)
        {

            config.Formatters.JsonFormatter.SerializerSettings.ReferenceLoopHandling = ReferenceLoopHandling.Ignore;
            config.Formatters.JsonFormatter.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver();
            config.MapHttpAttributeRoutes();
        }
    }
}


**** ApiArticleController.cs


using EPiServer;
using EPiServer.Core;
using EPiServer.ServiceLocation;
using SPA.Web.Models.Pages;
using System.Linq;
using System.Threading.Tasks;
using System.Web.Http;

namespace SPA.Web.Controllers
{
    [RoutePrefix("newsapi")]
    public class ApiArticleController : ApiController
    {
        private readonly IContentLoader _contentLoader = ServiceLocator.Current.GetInstance<IContentLoader>();

        [HttpGet, Route("article/toc")]
        public async Task<IHttpActionResult> GetArticleIndex()
        {
            var cref = _contentLoader.Get<StartPage>(ContentReference.StartPage).NewsIndexPage;
            var articles = Enumerable.Empty<object>();

            articles = _contentLoader.GetChildren<ArticlePage>(cref).Select(item => new
            {
                Headline = item.Headline,
                Thumbnail = item.Thumbnail,
                DateTime = item.DateTime
            });

            if (articles.Any()) return this.Ok(articles);
            else return this.NotFound();
        }

        [HttpGet, Route("articles")]
        public async Task<IHttpActionResult> GetArticles(int skip = 0, int take = -1)
        {
            var cref = _contentLoader.Get<StartPage>(ContentReference.StartPage).NewsIndexPage;
            var articles = Enumerable.Empty<ArticlePage>();

            if (take < 0)
            {
                articles = _contentLoader.GetChildren<ArticlePage>(cref);
            }
            else
            {
                articles = _contentLoader.GetChildren<ArticlePage>(cref).Skip(skip).Take(take);
            }

            return this.Ok(articles);
        }
    }
}

**** StartPage.cs

public virtual ContentReference NewsIndexPage { get; set; }